{"version":3,"sources":["components/Persons.js","services/personService.js","components/Notification.js","App.js","index.js"],"names":["Button","text","handleClick","onClick","Person","person","handleDelete","name","number","baseUrl","axios","get","then","res","data","newPerson","post","id","delete","response","put","Notification","notification","className","type","message","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filterPersons","setFilterPersons","filteredPersons","setFilteredPersons","setNotification","useEffect","personService","initialPersons","handleDeleteError","console","log","setTimeout","initialNotes","window","confirm","updatedPerson","filter","onChange","event","target","value","toLowerCase","onSubmit","oldPersons","personsNames","map","preventDefault","includes","newPersons","concat","catch","push","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc93b86d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Button = ({ text, handleClick }) => {\r\n  return <button onClick={handleClick}> {text}</button>;\r\n};\r\n\r\nconst Person = ({  person, handleDelete }) => {\r\n  return (\r\n    <li>{person.name} {person.number}\r\n    <Button text=\"delete\" handleClick={() => handleDelete(person)} />\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Person","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n// const baseUrl = 'http://localhost:3001/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(res => res.data)\r\n}\r\n\r\nconst create = newPerson => {\r\n    const request = axios.post(baseUrl, newPerson)\r\n    return request.then(res => res.data)\r\n}\r\n\r\nconst removePerson = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`);\r\n    return request.then((response) => response.data);\r\n  };\r\n\r\nconst updatePerson = (id, person) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, person)\r\n  return request.then((response) => response.data)\r\n}\r\n  export default {\r\n    getAll: getAll,\r\n    create: create,\r\n    delete: removePerson,\r\n    update: updatePerson \r\n  };\r\n  ","import React from 'react'\r\n\r\nconst Notification = ({notification}) => {\r\n    if (notification == null){\r\n        return null\r\n    }\r\n\r\n    return(\r\n        <div className={notification.type}>\r\n            {notification.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification ","import React, { useState, useEffect } from 'react'\r\nimport Person from './components/Persons'\r\nimport personService from './services/personService'\r\nimport Notification from './components/Notification'\r\n\r\n\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons ] = useState([]) \r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ filterPersons, setFilterPersons ] = useState(false)\r\n  const [ filteredPersons, setFilteredPersons ] = useState([])\r\n  const [ notification, setNotification ] = useState({})\r\n\r\n  useEffect(() => {\r\n    personService.getAll().then(initialPersons  => setPersons(initialPersons ))\r\n  }, [])\r\n\r\n  const handleAddName = (event) => {\r\n    let oldPersons = [...persons];\r\n    const personsNames = persons.map((person) => person.name)\r\n    const newPerson = {name: newName, number: newNumber}\r\n\r\n    event.preventDefault();\r\n    if (!newName || !newNumber) {\r\n      alert(\"Name or Number can not be empty\");\r\n      return;\r\n    }\r\n    if (personsNames.includes(newName)) {\r\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n        const id = persons.filter((person) => person.name === newName)[0].id\r\n        personService\r\n        .update(id, newPerson)\r\n        .then((newPerson) => {\r\n          const newPersons = persons\r\n            .filter((person) => person.name !== newPerson.name)\r\n            .concat(newPerson)\r\n          setPersons(newPersons)\r\n          setNotification({\r\n            message:`added ${newPerson.name}`,\r\n            type:\"success\"\r\n          })\r\n          setTimeout(() => {\r\n            setNotification(null) \r\n          }, 5000)\r\n        })\r\n        .catch(() => {\r\n          handleDeleteError(newName)\r\n        })\r\n      }\r\n      return;\r\n    }\r\n    personService.create(newPerson).then(res => {\r\n      oldPersons.push(res);\r\n      setPersons(oldPersons)\r\n      setNewName('')\r\n      setNewNumber('')\r\n      setNotification({\r\n        message:`updated ${newPerson.name}`,\r\n        type:\"success\"\r\n      })\r\n      setTimeout(() => {\r\n        setNotification(null) \r\n      }, 5000)\r\n    })\r\n \r\n    \r\n  };\r\n\r\n  const handleDeleteError = (name) => {\r\n    console.log(\"error in deleting name\")\r\n    setNotification({\r\n      message:`${name}'s information was already deleted from server`,\r\n      type:\"error\"\r\n    })\r\n    setTimeout(() => {setNotification(null)}, 5000)\r\n    personService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setPersons(initialNotes)\r\n        })\r\n  }\r\n\r\n\r\n  const handleFilter = (event) => {\r\n    if(event.target.value !== '') {\r\n      setFilterPersons(true)\r\n      setFilteredPersons(persons.filter(person => person.name.toLowerCase() === event.target.value.toLowerCase()))\r\n    } else {\r\n      setFilterPersons(false)\r\n    }\r\n  }\r\n  const handleDelete = ({ id, name }) => {\r\n    if (window.confirm(`Are you sure, you want to delete ${name}?`)) {\r\n      personService.delete(id).then(() => {\r\n        const updatedPerson = persons.filter((person) => person.id !== id);\r\n        setPersons(updatedPerson);\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification notification={notification}></Notification>\r\n      <div>\r\n        filter shown with <input onChange={handleFilter}/>\r\n      </div>\r\n      <h2>Add new</h2>\r\n      <form onSubmit={handleAddName}>\r\n        <div>\r\n          name:\r\n          <input\r\n            value={newName}\r\n            onChange={(event) => setNewName(event.target.value)}\r\n          />\r\n        </div>\r\n        \r\n        <div> \r\n        number: \r\n        <input\r\n            value={newNumber}\r\n            onChange={(event) => setNewNumber(event.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n      { /*<div>debug: {newName}</div> */}\r\n      <h2>Numbers</h2>\r\n      {filterPersons === false\r\n        ? persons.map(person => (<Person key={person.name} person={person} handleDelete={handleDelete}/>))\r\n        : filteredPersons.map(person => (<Person key={person.name} person = {person} handleDelete={handleDelete}/>))}\r\n      </div>\r\n    )\r\n\r\n};\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}